/* Includes ------------------------------------------------------------------*/
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "app.h"
/* Private define ------------------------------------------------------------*/
#define 	LED_PORT 		GPIOA
#define 	LED_PIN 		GPIO_PIN_5
#define     PB_PIN          GPIO_PIN_13

#define 	LED_MODE_OFF		0
#define 	LED_MODE_ON			1
#define 	LED_MODE_FLASHING	2

void ShowCommands(void);
void UART_TransmitString(UART_HandleTypeDef *p_huart, char a_string[], int newline);
/* Private variables ---------------------------------------------------------*/
extern UART_HandleTypeDef huart2;
volatile char rxData;
volatile int ledMode = LED_MODE_FLASHING;

void App_Init(void) {
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);

	UART_TransmitString(&huart2, "-----------------", 1);
	UART_TransmitString(&huart2, "~ Nucleo-L476RG ~", 1);
	UART_TransmitString(&huart2, "-----------------", 1);

	ShowCommands();

	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rxData, 1); //Start the Rx interrupt.
}

void App_MainLoop(void) {
	if (ledMode == LED_MODE_FLASHING) {
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
	}
	HAL_Delay(1000);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *p_huart) {
	//Process the data received from UART.
	switch (rxData) {
	case 'I':
	case 'i':
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
		ledMode = LED_MODE_ON;
		break;
	case 'O':
	case 'o':
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
		ledMode = LED_MODE_OFF;
		break;
	case 'F':
	case 'f':
		ledMode = LED_MODE_FLASHING;
		break;
	case 'H':
	case 'h':
		ShowCommands();
		break;
	}

	HAL_UART_Receive_IT(p_huart, (uint8_t*) &rxData, 1); //Restart the Rx interrupt.
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin==PB_PIN){
		switch(ledMode){
			case LED_MODE_ON:
				ledMode=LED_MODE_FLASHING;
				break;

			case LED_MODE_FLASHING:
				HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
				ledMode=LED_MODE_OFF;
				break;

			case LED_MODE_OFF:
				HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
				ledMode=LED_MODE_ON;
				break;

		}
	}
}



void ShowCommands(void) {
	UART_TransmitString(&huart2, "Type on keyboard to send command from PC to MCU:", 1);
	UART_TransmitString(&huart2, "> I: turn on LED, O: turn off LED, F: flashing LED, H: show commands", 1);
}

void UART_TransmitString(UART_HandleTypeDef *p_huart, char a_string[], int newline) {
	HAL_UART_Transmit(p_huart, (uint8_t*) a_string, strlen(a_string), HAL_MAX_DELAY);
	if (newline != 0) {
		HAL_UART_Transmit(p_huart, (uint8_t*) "\n\r", 2, HAL_MAX_DELAY);
	}
}
